---
title: "Ergebnisse Dart Pilot"
author: "Lina"
date: today 
format: 
  html:
    self-contained: true 
    toc: true 
    toc-title: Inhalt
    toc-location: left 
    theme: 
      light: minty
    fontsize: 32 px 
    font-family: Roboto
    grid:
      sidebar-width: 300px
      body-width: 900px
      margin-width: 300px
      gutter-width: 1.5rem
    code-tools: 
     source: true
     toggle: false
     caption: This is my code
lang: de
bibliography: dart_references.bib
citation-location: margin
execute: 
  echo: fenced
  warning: false
  messages: false
  error: true
code-fold: false
code-summary: Hier siehst du den Code... 
---

```{r}
#| eval: true
#| include: false
library(ggplot2)
library(tidyverse)
library(readxl)
library(dplyr)
library(plotly)
library(tidyr)
library(stringr)
library(writexl)
library(openxlsx)
library(DT)
library(knitr)
library(afex)
library(emmeans)
library(ez)

darts = read_excel("/Users/linafricke/Documents/Promotion/Studie 2 /1_Pilotstudien/Pilot 2/Pilot_2_UÃàbersicht.xlsx", sheet = "young")

darts_old = read_excel("/Users/linafricke/Documents/Promotion/Studie 2 /1_Pilotstudien/Pilot 2/Pilot_2_UÃàbersicht.xlsx", sheet="old")

```

::: {.callout-important}
Es wurden bisher insgesamt _n_=`r ((ncol(darts)-2)/2)+((ncol(darts_old)-2)/2)` Personen erhoben. Davon waren _N_=`r (ncol(darts)-2)/2` jung und _N_=`r (ncol(darts_old)-2)/2` alt.
:::

## Literatur

* 6 Bl√∂cke √° 25 W√ºrfe = **150 W√ºrfe** [@mizuguchi2018effect]. 
* 15-25 W√ºrfe (Pre-Test, 4 Quartile, Post-Test; 6 Bl√∂cke) = **90-130 W√ºrfe** [@meek2021anodal]
* Ich üôÇ ‚Üí 20 Bl√∂cke √° 8 W√ºrfe = **160 W√ºrfe**

```{r}
#| eval: true
#| echo: false
#| include: false

# Datensatz pr√§prozessieren

# Alle Spalten als numerisch angeben
darts_clean = darts %>%
  mutate(across(starts_with("vp"), ~ as.numeric(str_trim(.))))

# NaNs richtig benennen
darts_clean = darts_clean %>%
  mutate(across(starts_with("vp"), ~ ifelse(is.nan(.), NA, .)))

# Daten ins long-format bringen
long_darts = darts_clean %>%
  pivot_longer(cols = starts_with("vp"),
               names_to = c("VP", ".value"),
               names_pattern = "vp(..)([xy])") %>%
  rename(x = x, y = y) %>%
  mutate(VP = paste0("vp", VP))  # optional, zur Klarheit

# .. und richtig sortieren
long_darts = long_darts %>%
  arrange(VP, Block, Wurf)
```

```{r}
#| eval: true
#| echo: false
#| include: false

# Distanzen zum Bulls Eye (0/0) berechnen

# Referenzpunkte (Block 0, Wurf 0 je Proband)
bull = long_darts %>%
  filter(Block == 0, Wurf == 0) %>%
  select(VP, X_ref = x, Y_ref = y)

# Referenz (Bulls Eye in Datensatz integrieren)
darts_distance = long_darts %>%
  left_join(bull)  

# Distanz berechnen
darts_distance = darts_distance %>%
  mutate(distance = sqrt((x - X_ref)^2 + (y - Y_ref)^2))

colnames(darts_distance)[1:3] = c("block", "number", "vp")

#x_ref und y-Ref wieder l√∂schen
darts_distance = darts_distance %>%
  select(-X_ref, -Y_ref)
```

```{r}
#| eval: true
#| echo: false
#| include: false

# Mittelwert der Distanz berechnen
mean_distance = darts_distance %>%
  filter(number %in% 1:8) %>%
  group_by(vp, block) %>%
  summarise(mean_distance = mean(distance, na.rm = TRUE), .groups = "drop")
```

```{r}
#| eval: true
#| echo: false
#| include: false

# Median der Distanz berechnen
median_distance = darts_distance %>%
  filter(number %in% 1:8) %>%
  group_by(vp, block) %>%
  summarise(median_distance = median(distance, na.rm = TRUE), .groups = "drop")
```

```{r}
#| eval: true
#| echo: false
#| include: false

# Output-Datei generieren

# Mittelwert-Wide
mittelwerte_wide <- mean_distance %>%
  pivot_wider(names_from = vp, values_from = mean_distance)

# Median-Wide
median_wide <- median_distance %>%
  pivot_wider(names_from = vp, values_from = median_distance)

# Transponieren: Mittelwert
transpose_mean <- mittelwerte_wide %>%
  select(-block) %>%
  t() %>%
  as.data.frame()
colnames(transpose_mean) <- paste0("AvgB_", unique(mittelwerte_wide$block))
transpose_mean$VP <- rownames(transpose_mean)
transpose_mean <- transpose_mean %>% relocate(VP)

# Transponieren: Median
transpose_median <- median_wide %>%
  select(-block) %>%
  t() %>%
  as.data.frame()
colnames(transpose_median) <- paste0("MedB_", unique(median_wide$block))
transpose_median$VP <- rownames(transpose_median)
transpose_median <- transpose_median %>% relocate(VP)

# Output-Ordner und Dateiname
output_ordner <- "/Users/linafricke/Documents/Promotion/Studie 2 /1_Pilotstudien/Pilot 2"
dateiname <- paste0(Sys.Date(), "_Darts_Distanz.xlsx")
pfad <- file.path(output_ordner, dateiname)

# Workbook erstellen
wb <- createWorkbook()

# Bl√§tter hinzuf√ºgen
addWorksheet(wb, "Mittelwert")
addWorksheet(wb, "Median")

# Daten schreiben
writeData(wb, sheet = "Mittelwert", transpose_mean)
writeData(wb, sheet = "Median", transpose_median)

# Datei speichern
saveWorkbook(wb, pfad, overwrite = TRUE)
```

```{r}
#| eval: true
#| include: false

# Aggregierte Werte pro Block (W√ºrfe 1‚Äì8)
darts_summary <- darts_distance %>%
  filter(number %in% 1:8) %>%  # Referenzwurf (0) ausschlie√üen
  group_by(block) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )
```

```{r}
#| eval: true
#| include: false

# und genau die Pr√§prozessierung mache ich f√ºr die alten Personen

# Daten s√§ubern und long-format erzeugen
darts_old_clean = darts_old %>%
  mutate(across(starts_with("vp"), ~ as.numeric(str_trim(.)))) %>%
  mutate(across(starts_with("vp"), ~ ifelse(is.nan(.), NA, .)))

long_darts_old = darts_old_clean %>%
  pivot_longer(cols = starts_with("vp"),
               names_to = c("VP", ".value"),
               names_pattern = "vp(..)([xy])") %>%
  rename(x = x, y = y) %>%
  mutate(VP = paste0("vp", VP)) %>%
  arrange(VP, Block, Wurf)

# Referenzpunkte: Block 0, Wurf 0
bull_old = long_darts_old %>%
  filter(Block == 0, Wurf == 0) %>%
  select(VP, X_ref = x, Y_ref = y)

# Distanzen berechnen
darts_old_distance = long_darts_old %>%
  left_join(bull_old) %>%
  mutate(distance = sqrt((x - X_ref)^2 + (y - Y_ref)^2))

colnames(darts_old_distance)[1:3] = c("block", "number", "vp")

# Referenzkoordinaten wieder l√∂schen
darts_old_distance = darts_old_distance %>%
  select(-X_ref, -Y_ref)

# Mittelwert
mean_distance_old = darts_old_distance %>%
  filter(number %in% 1:8) %>%
  group_by(vp, block) %>%
  summarise(mean_distance = mean(distance, na.rm = TRUE), .groups = "drop")

# Median
median_distance_old = darts_old_distance %>%
  filter(number %in% 1:8) %>%
  group_by(vp, block) %>%
  summarise(median_distance = median(distance, na.rm = TRUE), .groups = "drop")

# Wide-Format
mittelwerte_old_wide <- mean_distance_old %>%
  pivot_wider(names_from = vp, values_from = mean_distance)

median_old_wide <- median_distance_old %>%
  pivot_wider(names_from = vp, values_from = median_distance)

# Transponieren Mittelwert
transpose_mean_old <- mittelwerte_old_wide %>%
  select(-block) %>%
  t() %>%
  as.data.frame()
colnames(transpose_mean_old) <- paste0("AvgB_", unique(mittelwerte_old_wide$block))
transpose_mean_old$VP <- rownames(transpose_mean_old)
transpose_mean_old <- transpose_mean_old %>% relocate(VP)

# Transponieren Median
transpose_median_old <- median_old_wide %>%
  select(-block) %>%
  t() %>%
  as.data.frame()
colnames(transpose_median_old) <- paste0("MedB_", unique(median_old_wide$block))
transpose_median_old$VP <- rownames(transpose_median_old)
transpose_median_old <- transpose_median_old %>% relocate(VP)

# Alte Daten zu bestehendem Workbook hinzuf√ºgen
addWorksheet(wb, "Mittelwert_alt")
addWorksheet(wb, "Median_alt")

writeData(wb, sheet = "Mittelwert_alt", transpose_mean_old)
writeData(wb, sheet = "Median_alt", transpose_median_old)

# Workbook erneut speichern
saveWorkbook(wb, pfad, overwrite = TRUE)

darts_old_summary <- darts_old_distance %>%
  filter(number %in% 1:8) %>%
  group_by(block) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )
```


## Daten (Block 1-20)

* f√ºr **jeden Block** (8 W√ºrfe) wurde jeweils der Mittelwert und Median bestimmt

::: {.panel-tabset}
## Diagramm (jung)

```{r}
#| eval: true
#| echo: false
darts_long <- darts_summary %>%
  select(block, mean_dist, median_dist) %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ", values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

graph <- ggplot(darts_long, aes(x = block, y = Distanz, color = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  
  scale_x_continuous(breaks = 1:20) +
  scale_y_continuous(limits = c(55, 95), breaks = seq(55, 95, by = 5)) +

  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +

  labs(
    x = "Block",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

# Interaktive Darstellung
ggplotly(graph)
```

## Diagramm (alt)

```{r}
#| eval: true
#| echo: false

# Alte Proband*innen
darts_long_old <- darts_old_summary %>%
  select(block, mean_dist, median_dist) %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ", values_to = "Distanz") %>%
  mutate(
    Typ = recode(Typ,
                 "mean_dist" = "Mittelwert",
                 "median_dist" = "Median"),
    Gruppe = "alt"
  )

graph <- ggplot(darts_long_old, aes(x = block, y = Distanz, color = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  
  scale_x_continuous(breaks = 1:20) +
  scale_y_continuous(limits = c(55, 110), breaks = seq(55, 110, by = 5)) +

  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +

  labs(
    x = "Block",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

# Interaktive Darstellung
ggplotly(graph)

```


## Daten
::: {.panel-tabset}

## Mittelwert (jung)

```{r}
#| eval: true
#| echo: false

datatable(
  transpose_mean,
  rownames = FALSE,
  colnames = c("VP", "Block 1", "Block 2", "Block 3", "Block 4", "Block 5", "Block 6",
               "Block 7", "Block 8", "Block 9", "Block 10", "Block 11", "Block 12",
               "Block 13", "Block 14", "Block 15", "Block 16", "Block 17", "Block 18",
               "Block 19", "Block 20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(transpose_mean), digits = 2) %>%
  formatStyle(columns = 1:ncol(transpose_mean))
```

## Median (jung)

```{r}
#| eval: true
#| echo: false

datatable(
  transpose_median,
  rownames = F,
  colnames = c("VP", "Block 1", "Block 2", "Block 3", "Block 4", "Block 5", "Block 6", "Block 7", "Block 8", "Block 9", "Block 10", "Block 11", "Block 12", "Block 13", "Block 14", "Block 15", "Block 16", "Block 17", "Block 18", "Block 19", "Block 20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(transpose_median), digits = 2)
```

## Mittelwert (alt)

```{r}
#| eval: true
#| echo: false

datatable(
  transpose_mean_old,
  rownames = FALSE,
  colnames = c("VP", "Block 1", "Block 2", "Block 3", "Block 4", "Block 5", "Block 6",
               "Block 7", "Block 8", "Block 9", "Block 10", "Block 11", "Block 12",
               "Block 13", "Block 14", "Block 15", "Block 16", "Block 17", "Block 18",
               "Block 19", "Block 20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(transpose_mean_old), digits = 2) %>%
  formatStyle(columns = 1:ncol(transpose_mean_old))
```

## Median (alt)
```{r}
#| eval: true
#| echo: false

datatable(
  transpose_median_old,
  rownames = FALSE,
  colnames = c("VP", "Block 1", "Block 2", "Block 3", "Block 4", "Block 5", "Block 6",
               "Block 7", "Block 8", "Block 9", "Block 10", "Block 11", "Block 12",
               "Block 13", "Block 14", "Block 15", "Block 16", "Block 17", "Block 18",
               "Block 19", "Block 20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(transpose_median_old), digits = 2) %>%
  formatStyle(columns = 1:ncol(transpose_median_old))
```
:::

## Anova mit Messwiederholung

::: {.panel-tabset}

## Mittelwert (jung)
```{r}
#| eval: true
#| echo: false
#| include: false

mean_distance <- mean_distance %>%
  filter(vp != "vp09") %>%     # vp09 ausschlie√üen
  mutate(block = factor(block))

anova_result <- ezANOVA(
  data = mean_distance,
  dv = mean_distance,
  wid = vp,
  within = block,
  type = 1,
  detailed = TRUE
)

anova_table <- anova_result$ANOVA %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

# Modell f√ºr emmeans
aov_afex <- aov_ez(
  id = "vp",
  dv = "mean_distance",
  within = "block",
  data = mean_distance,
  type = 3
)

# EMMs
emm_table <- emmeans(aov_afex, ~ block) %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~ round(., 2)))

# Kontraste
contrast_table <- contrast(emmeans(aov_afex, ~ block), method = "poly") %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

```

```{r}
#| eval: true
#| echo: false

kable(anova_table, caption = "Within-Subject Effects")
kable(contrast_table, caption = "Within-Subject Contrast")
```

## Median (jung)

```{r}
#| eval: true
#| echo: false
#| include: false

median_distance <- median_distance %>%
  filter(vp != "vp09") %>%     # vp09 ausschlie√üen
  mutate(block = factor(block))

anova_result <- ezANOVA(
  data = median_distance,
  dv = median_distance,
  wid = vp,
  within = block,
  type = 1,
  detailed = TRUE
)

anova_table <- anova_result$ANOVA %>%
  mutate(
    etasq_p = SSn / (SSn + SSd)   # partielles eta¬≤
  ) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))


# Modell f√ºr emmeans (korrigiert)
aov_afex <- aov_ez(
  id = "vp",
  dv = "median_distance",
  within = "block",
  data = median_distance,
  type = 3
)

# EMMs
emm_table <- emmeans(aov_afex, ~ block) %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~ round(., 2)))

# Kontraste
contrast_table <- contrast(emmeans(aov_afex, ~ block), method = "poly") %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

```

```{r}
#| eval: true
#| echo: false

kable(
  anova_table %>%
    select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p),
  caption = "Within-Subject Effects"
)
kable(contrast_table, caption = "Within-Subject Contrasts")
```

## Mittelwert (alt)
```{r}
#| eval: true
#| echo: false
#| include: false

# Optional: VP ausschlie√üen, wenn gew√ºnscht
mean_distance_old <- mean_distance_old %>%
  # filter(vp != "vpXX") %>%  # z.‚ÄØB. auff√§llige VP ausschlie√üen
  mutate(block = factor(block))

# ANOVA (ezANOVA)
anova_result_mean_old <- ezANOVA(
  data = mean_distance_old,
  dv = mean_distance,
  wid = vp,
  within = block,
  type = 1,
  detailed = TRUE
)

anova_table_mean_old <- anova_result_mean_old$ANOVA %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

# Modell mit afex f√ºr emmeans
aov_afex_mean_old <- aov_ez(
  id = "vp",
  dv = "mean_distance",
  within = "block",
  data = mean_distance_old,
  type = 3
)

# Emmeans & Kontraste
emm_mean_old <- emmeans(aov_afex_mean_old, ~ block) %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~ round(., 2)))

contrast_mean_old <- contrast(emmeans(aov_afex_mean_old, ~ block), method = "poly") %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~ round(., 3)))
```

```{r}
#| eval: true
#| echo: false

kable(anova_table_mean_old, caption = "Within-Subject Effects")
kable(contrast_mean_old, caption = "Within-Subject Contrasts")
```

## Median (alt)

```{r}
#| eval: true
#| echo: false
#| include: false

median_distance_old <- median_distance_old %>%
  # filter(vp != "vpXX") %>%  # optional: auff√§llige VP ausschlie√üen
  mutate(block = factor(block))

anova_result_median_old <- ezANOVA(
  data = median_distance_old,
  dv = median_distance,
  wid = vp,
  within = block,
  type = 1,
  detailed = TRUE
)

anova_table_median_old <- anova_result_median_old$ANOVA %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

# Modell f√ºr emmeans
aov_afex_median_old <- aov_ez(
  id = "vp",
  dv = "median_distance",
  within = "block",
  data = median_distance_old,
  type = 3
)

# Emmeans & Kontraste
emm_median_old <- emmeans(aov_afex_median_old, ~ block) %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~ round(., 2)))

contrast_median_old <- contrast(emmeans(aov_afex_median_old, ~ block), method = "poly") %>%
  as.data.frame() %>%
  mutate(across(where(is.numeric), ~ round(., 3)))
```

```{r}
#| eval: true
#| echo: false

kable(anova_table_median_old, caption = "Within-Subject Effects")
kable(contrast_median_old, caption = "Within-Subject Contrasts")
```
:::
:::

# Daten (10x2er Bl√∂cke)

* hier wurden immer **2 Bl√∂cke** zusammengefasst (16 W√ºrfe) und jeweils der Mittelwert und Median berechnet
* insgesamt **10 Datenpunkte** 

```{r}
#| eval: true
#| echo: false

# junge Menschen
# 2 Bl√∂cke zusammenschlie√üen (10 Gruppen)
darts_binned_2 <- darts_distance %>%
  filter(number %in% 1:8) %>%
  mutate(
    blockgruppe = case_when(
      block %in% 1:2   ~ "Block 1‚Äì2",
      block %in% 3:4   ~ "Block 3‚Äì4",
      block %in% 5:6   ~ "Block 5‚Äì6",
      block %in% 7:8   ~ "Block 7‚Äì8",
      block %in% 9:10  ~ "Block 9‚Äì10",
      block %in% 11:12 ~ "Block 11‚Äì12",
      block %in% 13:14 ~ "Block 13‚Äì14",
      block %in% 15:16 ~ "Block 15‚Äì16",
      block %in% 17:18 ~ "Block 17‚Äì18",
      block %in% 19:20 ~ "Block 19‚Äì20",
      TRUE ~ NA_character_
    ),
    blockgruppe = factor(
      blockgruppe,
      levels = c("Block 1‚Äì2", "Block 3‚Äì4", "Block 5‚Äì6", "Block 7‚Äì8", "Block 9‚Äì10",
                 "Block 11‚Äì12", "Block 13‚Äì14", "Block 15‚Äì16", "Block 17‚Äì18", "Block 19‚Äì20")
    )
  ) %>%
  filter(!is.na(blockgruppe)) %>%
  group_by(vp, blockgruppe) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )

# Alte Menschen
darts_binned_2_old <- darts_old_distance %>%
  filter(number %in% 1:8) %>%
  mutate(
    blockgruppe = case_when(
      block %in% 1:2   ~ "Block 1‚Äì2",
      block %in% 3:4   ~ "Block 3‚Äì4",
      block %in% 5:6   ~ "Block 5‚Äì6",
      block %in% 7:8   ~ "Block 7‚Äì8",
      block %in% 9:10  ~ "Block 9‚Äì10",
      block %in% 11:12 ~ "Block 11‚Äì12",
      block %in% 13:14 ~ "Block 13‚Äì14",
      block %in% 15:16 ~ "Block 15‚Äì16",
      block %in% 17:18 ~ "Block 17‚Äì18",
      block %in% 19:20 ~ "Block 19‚Äì20",
      TRUE ~ NA_character_
    ),
    blockgruppe = factor(
      blockgruppe,
      levels = c("Block 1‚Äì2", "Block 3‚Äì4", "Block 5‚Äì6", "Block 7‚Äì8", "Block 9‚Äì10",
                 "Block 11‚Äì12", "Block 13‚Äì14", "Block 15‚Äì16", "Block 17‚Äì18", "Block 19‚Äì20")
    )
  ) %>%
  filter(!is.na(blockgruppe)) %>%
  group_by(vp, blockgruppe) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )

```

```{r}
#| eval: true
#| echo: false

# Jung
# Wide Format f√ºr Mittelwerte & Mediane
means_wide_2 <- darts_binned_2 %>%
  select(vp, blockgruppe, mean_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = mean_dist)

medians_wide_2 <- darts_binned_2 %>%
  select(vp, blockgruppe, median_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = median_dist)

addWorksheet(wb, "Mittelwert 2 Bl√∂cke jung")
addWorksheet(wb, "Median 2 Bl√∂cke jung")

writeData(wb, sheet = "Mittelwert 2 Bl√∂cke jung", means_wide_2)
writeData(wb, sheet = "Median 2 Bl√∂cke jung", medians_wide_2)

saveWorkbook(wb, pfad, overwrite = TRUE)

#Alt
# Wide Format
means_wide_2_old <- darts_binned_2_old %>%
  select(vp, blockgruppe, mean_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = mean_dist)

medians_wide_2_old <- darts_binned_2_old %>%
  select(vp, blockgruppe, median_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = median_dist)

# In Excel schreiben
addWorksheet(wb, "Mittelwert 2 Bl√∂cke alt")
addWorksheet(wb, "Median 2 Bl√∂cke alt")

writeData(wb, sheet = "Mittelwert 2 Bl√∂cke alt", means_wide_2_old)
writeData(wb, sheet = "Median 2 Bl√∂cke alt", medians_wide_2_old)

saveWorkbook(wb, pfad, overwrite = TRUE)
```


::: {.panel-tabset}
## Diagramm (jung)
```{r}
#| eval: true
#| echo: false

# Zusammenfassen f√ºr Mittelwert & Median √ºber alle VPs
darts_binned_summary_2 <- darts_binned_2 %>%
  group_by(blockgruppe) %>%
  summarise(
    mean_dist = mean(mean_dist, na.rm = TRUE),
    median_dist = mean(median_dist, na.rm = TRUE),
    .groups = "drop"
  )

# Long Format f√ºr ggplot
darts_binned_long_2 <- darts_binned_summary_2 %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ",
               values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

# Plot
graph_2 <- ggplot(darts_binned_long_2, aes(x = blockgruppe, y = Distanz, color = Typ, group = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  scale_y_continuous(limits = c(65, 90), breaks = seq(65, 90, by = 5)) +
  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +
  labs(
    x = "Blockgruppe",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

ggplotly(graph_2)
```

## Diagramm (alt)

```{r}
#| eval: true
#| echo: false

# Zusammenfassen: Mittelwert & Median √ºber alle VPs
darts_binned_summary_2_old <- darts_binned_2_old %>%
  group_by(blockgruppe) %>%
  summarise(
    mean_dist = mean(mean_dist, na.rm = TRUE),
    median_dist = mean(median_dist, na.rm = TRUE),
    .groups = "drop"
  )

# Long Format f√ºr ggplot
darts_binned_long_2_old <- darts_binned_summary_2_old %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ",
               values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

# Plot f√ºr alte Proband*innen
graph_2_alt <- ggplot(darts_binned_long_2_old, aes(x = blockgruppe, y = Distanz, color = Typ, group = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  scale_y_continuous(limits = c(60, 115), breaks = seq(60, 115, by = 5)) +
  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +
  labs(
    x = "Blockgruppe",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

ggplotly(graph_2_alt)

```

## Daten

::: {.panel-tabset}

## Mittelwert (jung)
```{r}
#| eval: true
#| echo: false

datatable(means_wide_2,
  rownames = FALSE,
  colnames = colnames(means_wide_2),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(means_wide_2), digits = 2)

```

## Median (jung)
```{r}
#| eval: true
#| echo: false

datatable(medians_wide_2,
  rownames = FALSE,
  colnames = colnames(medians_wide_2),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(medians_wide_2), digits = 2)
```


## Mittelwert (alt)

```{r}
#| eval: true
#| echo: false

datatable(means_wide_2_old,
  rownames = FALSE,
  colnames = colnames(means_wide_2_old),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(means_wide_2_old), digits = 2)
```

## Median (alt)
```{r}
#| eval: true
#| echo: false

datatable(medians_wide_2_old,
  rownames = FALSE,
  colnames = colnames(medians_wide_2_old),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(medians_wide_2_old), digits = 2)
```

:::

## Anova mit Messwiederholung
```{r}
#| eval: true
#| include: false

# Faktoren setzen
darts_binned_2$vp <- factor(darts_binned_2$vp)
darts_binned_2$blockgruppe <- factor(darts_binned_2$blockgruppe)

# ANOVA mit ezANOVA
anova_result_mean_2 <- ezANOVA(
  data = darts_binned_2,
  dv = mean_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

# Partielles Eta¬≤ hinzuf√ºgen
anova_table_mean_2 <- anova_result_mean_2$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%                 # partielles eta¬≤
  filter(Effect != "(Intercept)") %>%                     # Intercept rausfiltern
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%    # nur relevante Spalten
  mutate(across(where(is.numeric), ~ round(., 3)))



# Modell mit afex
aov_afex_mean_2 <- aov_ez(
  id = "vp",
  dv = "mean_dist",
  within = "blockgruppe",
  data = darts_binned_2,
  type = 3
)

# Emmeans & lineare Kontraste
emm_mean_2 <- emmeans(aov_afex_mean_2, ~ blockgruppe)
contrast_mean_2 <- contrast(emm_mean_2, method = "poly")
```

:::{.panel-tabset}

## Mittelwert (jung)
```{r}
#| eval: true
#| echo: false

kable(anova_table_mean_2, caption = "Within-Subject Effects")
kable(contrast_mean_2, caption = "Within-Subject Contrasts")
```

## Median (jung)

```{r}
#| eval: true
#| include: false

# Faktoren setzen
darts_binned_2$vp <- factor(darts_binned_2$vp)
darts_binned_2$blockgruppe <- factor(darts_binned_2$blockgruppe)

# ANOVA mit ezANOVA
anova_result_median_2 <- ezANOVA(
  data = darts_binned_2,
  dv = median_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

anova_table_median_2 <- anova_result_median_2$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%                 # partielles eta¬≤
  filter(Effect != "(Intercept)") %>%                     # Intercept rausfiltern
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%    # nur relevante Spalten
  mutate(across(where(is.numeric), ~ round(., 3)))

# Modell mit afex
aov_afex_median_2 <- aov_ez(
  id = "vp",
  dv = "median_dist",
  within = "blockgruppe",
  data = darts_binned_2,
  type = 3
)

# Emmeans & Kontraste
emm_median_2 <- emmeans(aov_afex_median_2, ~ blockgruppe)
contrast_median_2 <- contrast(emm_median_2, method = "poly")
```

```{r}
#| eval: true
#| echo: false

kable(
  anova_table_median_2 %>%
    select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p),
  caption = "Within-Subject Effects)"
)
kable(contrast_table, caption = "Within-Subject Contrasts")
```
:::
:::


# Daten (5x4er Bl√∂cke)

* hier wurden immer **4 Bl√∂cke** zusammengefasst (32 W√ºrfe) und jeweils der Mittelwert und Median berechnet
* insgesamt **5 Datenpunkte**


```{r}
#| eval: true
#| echo: false

#Jung
# 4 Bl√∂cke zusammenschlie√üen
darts_binned_4 <- darts_distance %>%
  filter(number %in% 1:8) %>%
  mutate(
    blockgruppe = case_when(
      block %in% 1:4   ~ "Block 1‚Äì4",
      block %in% 5:8   ~ "Block 5‚Äì8",
      block %in% 9:12  ~ "Block 9‚Äì12",
      block %in% 13:16 ~ "Block 13‚Äì16",
      block %in% 17:20 ~ "Block 17‚Äì20",
      TRUE ~ NA_character_
    ),
    blockgruppe = factor(
      blockgruppe,
      levels = c("Block 1‚Äì4", "Block 5‚Äì8", "Block 9‚Äì12", "Block 13‚Äì16", "Block 17‚Äì20")
    )
  ) %>%
  filter(!is.na(blockgruppe)) %>%
  group_by(vp, blockgruppe) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )

#Alt
# 4 Bl√∂cke zusammenschlie√üen ‚Äì ALT
darts_binned_4_old <- darts_old_distance %>%
  filter(number %in% 1:8) %>%
  mutate(
    blockgruppe = case_when(
      block %in% 1:4   ~ "Block 1‚Äì4",
      block %in% 5:8   ~ "Block 5‚Äì8",
      block %in% 9:12  ~ "Block 9‚Äì12",
      block %in% 13:16 ~ "Block 13‚Äì16",
      block %in% 17:20 ~ "Block 17‚Äì20",
      TRUE ~ NA_character_
    ),
    blockgruppe = factor(
      blockgruppe,
      levels = c("Block 1‚Äì4", "Block 5‚Äì8", "Block 9‚Äì12", "Block 13‚Äì16", "Block 17‚Äì20")
    )
  ) %>%
  filter(!is.na(blockgruppe)) %>%
  group_by(vp, blockgruppe) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )
```

```{r}
#| eval: true
#| echo: false

#Jung
# Wide Format
# Mittelwerte transponieren
means_wide_4 <- darts_binned_4 %>%
  select(vp, blockgruppe, mean_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = mean_dist)

# Mediane transponieren
medians_wide_4 <- darts_binned_4 %>%
  select(vp, blockgruppe, median_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = median_dist)

# Neue Bl√§tter hinzuf√ºgen
addWorksheet(wb, "Mittelwert 4 Bl√∂cke")
addWorksheet(wb, "Median 4 Bl√∂cke")

# Daten schreiben
writeData(wb, sheet = "Mittelwert 4 Bl√∂cke", means_wide_4)
writeData(wb, sheet = "Median 4 Bl√∂cke", medians_wide_4)

# Datei speichern
saveWorkbook(wb, pfad, overwrite = TRUE)


# Alt
# Mittelwerte transponieren ‚Äì ALT
means_wide_4_old <- darts_binned_4_old %>%
  select(vp, blockgruppe, mean_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = mean_dist)

# Mediane transponieren ‚Äì ALT
medians_wide_4_old <- darts_binned_4_old %>%
  select(vp, blockgruppe, median_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = median_dist)

# Neue Bl√§tter f√ºr ALT hinzuf√ºgen
addWorksheet(wb, "Mittelwert 4 Bl√∂cke alt")
addWorksheet(wb, "Median 4 Bl√∂cke alt")

# Daten schreiben
writeData(wb, sheet = "Mittelwert 4 Bl√∂cke alt", means_wide_4_old)
writeData(wb, sheet = "Median 4 Bl√∂cke alt", medians_wide_4_old)

# Datei speichern
saveWorkbook(wb, pfad, overwrite = TRUE)
```


::: {.panel-tabset}
## Diagramm (jung)
```{r}
#| eval: true
#| echo: false

# Zusammenfassen √ºber alle vp
darts_binned_summary_4 <- darts_binned_4 %>%
  group_by(blockgruppe) %>%
  summarise(
    mean_dist = mean(mean_dist, na.rm = TRUE),
    median_dist = mean(median_dist, na.rm = TRUE),
    .groups = "drop"
  )

# Long-Format f√ºr ggplot
darts_binned_long_4 <- darts_binned_summary_4 %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ",
               values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

# Plot
graph_4 <- ggplot(darts_binned_long_4, aes(x = blockgruppe, y = Distanz, color = Typ, group = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  scale_y_continuous(limits = c(65, 90), breaks = seq(65, 90, by = 5)) +
  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +
  labs(
    x = "Blockgruppe",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

ggplotly(graph_4)
```

## Diagramm (alt)
```{r}
#| eval: true
#| echo: false

# Zusammenfassen √ºber alle alten VPs
darts_binned_summary_4_old <- darts_binned_4_old %>%
  group_by(blockgruppe) %>%
  summarise(
    mean_dist = mean(mean_dist, na.rm = TRUE),
    median_dist = mean(median_dist, na.rm = TRUE),
    .groups = "drop"
  )

# Long-Format f√ºr ggplot
darts_binned_long_4_old <- darts_binned_summary_4_old %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ",
               values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

# Plot
graph_4_old <- ggplot(darts_binned_long_4_old, aes(x = blockgruppe, y = Distanz, color = Typ, group = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  scale_y_continuous(limits = c(70, 95), breaks = seq(70, 95, by = 5)) +
  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +
  labs(
    x = "Blockgruppe",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

ggplotly(graph_4_old)
```


## Daten
::: {.panel-tabset}

## Mittelwert (jung)
```{r}
#| eval: true
#| echo: false

datatable(means_wide_4,
  rownames = FALSE,
  colnames = c("VP", "Block 1‚Äì4", "Block 5‚Äì8", "Block 9‚Äì12", "Block 13‚Äì16", "Block 17‚Äì20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(means_wide_4), digits = 2)
```

## Median (jung)
```{r}
#| eval: true
#| echo: false

datatable(medians_wide_4,
  rownames = FALSE,
  colnames = c("VP", "Block 1‚Äì4", "Block 5‚Äì8", "Block 9‚Äì12", "Block 13‚Äì16", "Block 17‚Äì20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(medians_wide_4), digits = 2)
```

## Mittelwert (alt)
```{r}
#| eval: true
#| echo: false

datatable(means_wide_4_old,
  rownames = FALSE,
  colnames = c("VP", "Block 1‚Äì4", "Block 5‚Äì8", "Block 9‚Äì12", "Block 13‚Äì16", "Block 17‚Äì20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(means_wide_4_old), digits = 2)
```

## Median (alt)
```{r}
#| eval: true
#| echo: false

datatable(medians_wide_4_old,
  rownames = FALSE,
  colnames = c("VP", "Block 1‚Äì4", "Block 5‚Äì8", "Block 9‚Äì12", "Block 13‚Äì16", "Block 17‚Äì20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(medians_wide_4_old), digits = 2)
```
:::


## Anova mit Messwiederholung

::: {.panel-tabset}

## Mittelwert (jung)

```{r}
#| eval: true
#| include: false

# Faktoren korrekt setzen
darts_binned_4$vp <- factor(darts_binned_4$vp)
darts_binned_4$blockgruppe <- factor(darts_binned_4$blockgruppe)

# ANOVA mit ezANOVA
anova_result_mean <- ezANOVA(
  data = darts_binned_4,
  dv = mean_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

anova_table_mean <- anova_result_mean$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%                 # partielles eta¬≤
    filter(Effect != "(Intercept)") %>%   
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%   # ges ausblenden
  mutate(across(where(is.numeric), ~ round(., 3)))

# Modell mit afex
aov_afex_mean <- aov_ez(
  id = "vp",
  dv = "mean_dist",
  within = "blockgruppe",
  data = darts_binned_4,
  type = 3
)

# Emmeans und Kontraste
emm_mean <- emmeans(aov_afex_mean, ~ blockgruppe)
contrast_mean <- contrast(emm_mean, method = "poly")
```

```{r}
#| eval: true
#| echo: false


kable(anova_table_mean %>%
       select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p),
  caption = "Within-Subject Effects")
kable(contrast_mean, caption = "Within-Subject Contrasts")
```


## Median (jung)
```{r}
#| eval: true
#| include: false

# Faktoren korrekt setzen
darts_binned_4$vp <- factor(darts_binned_4$vp)
darts_binned_4$blockgruppe <- factor(darts_binned_4$blockgruppe)

# ANOVA mit ezANOVA
anova_result_median <- ezANOVA(
  data = darts_binned_4,
  dv = median_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

anova_table_median <- anova_result_median$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%                 # partielles eta¬≤
    filter(Effect != "(Intercept)") %>%   
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%   # ges ausblenden
  mutate(across(where(is.numeric), ~ round(., 3)))

# Modell mit afex
aov_afex_median <- aov_ez(
  id = "vp",
  dv = "median_dist",
  within = "blockgruppe",
  data = darts_binned_4,
  type = 3
)

# Emmeans und Kontraste
emm_median <- emmeans(aov_afex_median, ~ blockgruppe)
contrast_median <- contrast(emm_median, method = "poly")
```

```{r}
#| eval: true
#| echo: false

kable(anova_table_median, caption = "Within-Subject Effects")
kable(contrast_median, caption = "Within- Subject Contrasts")
```

## Mittelwert (alt)

```{r}
#| eval: true
#| include: false

# Faktoren korrekt setzen
darts_binned_4_old$vp <- factor(darts_binned_4_old$vp)
darts_binned_4_old$blockgruppe <- factor(
  darts_binned_4_old$blockgruppe,
  levels = c("Block 1‚Äì4", "Block 5‚Äì8", "Block 9‚Äì12", "Block 13‚Äì16", "Block 17‚Äì20")
)

## Mittelwert (alt)
anova_result_mean_old <- ezANOVA(
  data = darts_binned_4_old,
  dv = mean_dist,
  wid = vp,
  within = blockgruppe,
  type = 1,
  detailed = TRUE
)

anova_table_mean_old <- anova_result_mean_old$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%     # partielles eta¬≤
  filter(Effect != "(Intercept)") %>%         # Intercept ausblenden
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_mean_old <- aov_ez(
  id = "vp",
  dv = "mean_dist",
  within = "blockgruppe",
  data = darts_binned_4_old,
  type = 3
)
emm_mean_old <- emmeans(aov_afex_mean_old, ~ blockgruppe)
contrast_mean_old <- contrast(emm_mean_old, method = "poly")

## Median (alt)
anova_result_median_old <- ezANOVA(
  data = darts_binned_4_old,
  dv = median_dist,
  wid = vp,
  within = blockgruppe,
  type = 1,
  detailed = TRUE
)

anova_table_median_old <- anova_result_median_old$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%     # partielles eta¬≤
  filter(Effect != "(Intercept)") %>%         # Intercept ausblenden
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_median_old <- aov_ez(
  id = "vp",
  dv = "median_dist",
  within = "blockgruppe",
  data = darts_binned_4_old,
  type = 3
)
emm_median_old <- emmeans(aov_afex_median_old, ~ blockgruppe)
contrast_median_old <- contrast(emm_median_old, method = "poly")
```


```{r}
#| eval: true
#| echo: false
kable(anova_table_mean_old, caption = "Within-Subject Effects")
kable(contrast_mean_old, caption = "Within-Subject Contrasts")
```

## Median (alt)

```{r}
#| eval: true
#| echo: false
kable(anova_table_median_old, caption = "Within-Subject Effects (alt, Median; partielles Œ∑¬≤)")
kable(contrast_median_old, caption = "Within-Subject Contrasts (alt, Median)")
```
:::
:::


# Daten (4x5er Bl√∂cke, gesamt 20 Bl√∂cke)

* hier wurden immer **5 Bl√∂cke** zusammengefasst (40 W√ºrfe) und jeweils der Mittelwert und Median berechnet
* insgesamt **4 Datenpunkte**

```{r}
#| eval: true
#| echo: false

darts_binned_5_jung <- darts_distance %>%
  filter(number %in% 1:8) %>%
  mutate(
    blockgruppe = case_when(
      block %in% 1:5   ~ "Block 1‚Äì5",
      block %in% 6:10  ~ "Block 6‚Äì10",
      block %in% 11:15 ~ "Block 11‚Äì15",
      block %in% 16:20 ~ "Block 16‚Äì20",
      TRUE ~ NA_character_
    ),
    blockgruppe = factor(
      blockgruppe,
      levels = c("Block 1‚Äì5", "Block 6‚Äì10", "Block 11‚Äì15", "Block 16‚Äì20")
    )
  ) %>%
  filter(!is.na(blockgruppe)) %>%
  group_by(vp, blockgruppe) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )

darts_binned_5_alt <- darts_old_distance %>%
  filter(number %in% 1:8) %>%
  mutate(
    blockgruppe = case_when(
      block %in% 1:5   ~ "Block 1‚Äì5",
      block %in% 6:10  ~ "Block 6‚Äì10",
      block %in% 11:15 ~ "Block 11‚Äì15",
      block %in% 16:20 ~ "Block 16‚Äì20",
      TRUE ~ NA_character_
    ),
    blockgruppe = factor(
      blockgruppe,
      levels = c("Block 1‚Äì5", "Block 6‚Äì10", "Block 11‚Äì15", "Block 16‚Äì20")
    )
  ) %>%
  filter(!is.na(blockgruppe)) %>%
  group_by(vp, blockgruppe) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )
```


```{r}
#| eval: true
#| echo: false

# Daten ins wide-Format
# Jung
means_wide_5_jung <- darts_binned_5_jung %>%
  select(vp, blockgruppe, mean_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = mean_dist)

medians_wide_5_jung <- darts_binned_5_jung %>%
  select(vp, blockgruppe, median_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = median_dist)

# Alt
means_wide_5_alt <- darts_binned_5_alt %>%
  select(vp, blockgruppe, mean_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = mean_dist)

medians_wide_5_alt <- darts_binned_5_alt %>%
  select(vp, blockgruppe, median_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = median_dist)
```

```{r}
#| eval: true
#| echo: false

# Excel Export
# Neue Bl√§tter hinzuf√ºgen
addWorksheet(wb, "Mittelwert 5er Bl√∂cke jung")
addWorksheet(wb, "Median 5er Bl√∂cke jung")
addWorksheet(wb, "Mittelwert 5er Bl√∂cke alt")
addWorksheet(wb, "Median 5er Bl√∂cke alt")

# Daten reinschreiben
writeData(wb, "Mittelwert 5er Bl√∂cke jung", means_wide_5_jung)
writeData(wb, "Median 5er Bl√∂cke jung", medians_wide_5_jung)
writeData(wb, "Mittelwert 5er Bl√∂cke alt", means_wide_5_alt)
writeData(wb, "Median 5er Bl√∂cke alt", medians_wide_5_alt)

# Workbook speichern
saveWorkbook(wb, pfad, overwrite = TRUE)
```


::: {.panel-tabset}

## Diagramm (jung)
```{r}
#| eval: true
#| echo: false

# Zusammenfassen √ºber alle vp
darts_binned_summary_5_jung <- darts_binned_5_jung %>%
  group_by(blockgruppe) %>%
  summarise(
    mean_dist = mean(mean_dist, na.rm = TRUE),
    median_dist = mean(median_dist, na.rm = TRUE),
    .groups = "drop"
  )

# Long-Format f√ºr ggplot
darts_binned_long_5_jung <- darts_binned_summary_5_jung %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ",
               values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

# Plot
graph_4 <- ggplot(darts_binned_long_5_jung, aes(x = blockgruppe, y = Distanz, color = Typ, group = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  scale_y_continuous(limits = c(65, 99), breaks = seq(65, 90, by = 5)) +
  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +
  labs(
    x = "Blockgruppe",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

ggplotly(graph_4)

```


## Diagramm (alt)

```{r}
#| eval: true
#| echo: false

# Zusammenfassen √ºber alle vp
darts_binned_summary_5_alt <- darts_binned_5_alt %>%
  group_by(blockgruppe) %>%
  summarise(
    mean_dist = mean(mean_dist, na.rm = TRUE),
    median_dist = mean(median_dist, na.rm = TRUE),
    .groups = "drop"
  )

# Long-Format f√ºr ggplot
darts_binned_long_5_alt <- darts_binned_summary_5_alt %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ",
               values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

# Plot
graph_4 <- ggplot(darts_binned_long_5_alt, aes(x = blockgruppe, y = Distanz, color = Typ, group = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  scale_y_continuous(limits = c(70, 95), breaks = seq(70, 95, by = 5)) +
  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +
  labs(
    x = "Blockgruppe",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

ggplotly(graph_4)

```

## Daten
::: {.panel-tabset}

## Mittelwert (jung)
```{r}
#| eval: true
#| echo: false

datatable(means_wide_5_jung,
  rownames = FALSE,
  colnames = c("VP", "Block 1‚Äì5", "Block 6‚Äì10", "Block 11‚Äì15", "Block 16‚Äì20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(means_wide_5_jung), digits = 2)
```

## Median (jung)
```{r}
#| eval: true
#| echo: false

datatable(medians_wide_5_jung,
  rownames = FALSE,
  colnames = c("VP", "Block 1‚Äì5", "Block 6‚Äì10", "Block 11‚Äì15", "Block 16‚Äì20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(medians_wide_5_jung), digits = 2)
```

## Mittelwert (alt)
```{r}
#| eval: true
#| echo: false

datatable(means_wide_5_alt,
  rownames = FALSE,
  colnames = c("VP", "Block 1‚Äì5", "Block 6‚Äì10", "Block 11‚Äì15", "Block 16‚Äì20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(means_wide_5_alt), digits = 2)
```

## Median (alt)
```{r}
#| eval: true
#| echo: false

datatable(medians_wide_5_alt,
  rownames = FALSE,
  colnames = c("VP", "Block 1‚Äì5", "Block 6‚Äì10", "Block 11‚Äì15", "Block 16‚Äì20"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(medians_wide_5_alt), digits = 2)
```
:::
## Anova mit Messwiederholung 
::: {.panel-tabset}

```{r}
#| eval: true
#| include: false

## --- ANOVA 4√ó5er Bl√∂cke: JUNG ---

# Faktoren korrekt setzen
darts_binned_5_jung$vp <- factor(darts_binned_5_jung$vp)
darts_binned_5_jung$blockgruppe <- factor(
  darts_binned_5_jung$blockgruppe,
  levels = c("Block 1‚Äì5", "Block 6‚Äì10", "Block 11‚Äì15", "Block 16‚Äì20")
)

## Mittelwert
anova_result_mean_5_jung <- ezANOVA(
  data = darts_binned_5_jung,
  dv = mean_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

anova_table_mean_5_jung <- anova_result_mean_5_jung$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%     # partielles eta¬≤
  filter(Effect != "(Intercept)") %>%
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_mean_5_jung <- aov_ez(
  id = "vp",
  dv = "mean_dist",
  within = "blockgruppe",
  data = darts_binned_5_jung,
  type = 3
)
emm_mean_5_jung <- emmeans(aov_afex_mean_5_jung, ~ blockgruppe)
contrast_mean_5_jung <- contrast(emm_mean_5_jung, method = "poly")

## Median
anova_result_median_5_jung <- ezANOVA(
  data = darts_binned_5_jung,
  dv = median_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

anova_table_median_5_jung <- anova_result_median_5_jung$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%     # partielles eta¬≤
  filter(Effect != "(Intercept)") %>%
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_median_5_jung <- aov_ez(
  id = "vp",
  dv = "median_dist",
  within = "blockgruppe",
  data = darts_binned_5_jung,
  type = 3
)
emm_median_5_jung <- emmeans(aov_afex_median_5_jung, ~ blockgruppe)
contrast_median_5_jung <- contrast(emm_median_5_jung, method = "poly")

## --- ANOVA 4√ó5er Bl√∂cke: ALT ---

# Faktoren korrekt setzen
darts_binned_5_alt$vp <- factor(darts_binned_5_alt$vp)
darts_binned_5_alt$blockgruppe <- factor(
  darts_binned_5_alt$blockgruppe,
  levels = c("Block 1‚Äì5", "Block 6‚Äì10", "Block 11‚Äì15", "Block 16‚Äì20")
)

## Mittelwert
anova_result_mean_5_alt <- ezANOVA(
  data = darts_binned_5_alt,
  dv = mean_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

anova_table_mean_5_alt <- anova_result_mean_5_alt$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%
  filter(Effect != "(Intercept)") %>%
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_mean_5_alt <- aov_ez(
  id = "vp",
  dv = "mean_dist",
  within = "blockgruppe",
  data = darts_binned_5_alt,
  type = 3
)
emm_mean_5_alt <- emmeans(aov_afex_mean_5_alt, ~ blockgruppe)
contrast_mean_5_alt <- contrast(emm_mean_5_alt, method = "poly")

## Median
anova_result_median_5_alt <- ezANOVA(
  data = darts_binned_5_alt,
  dv = median_dist,
  wid = vp,
  within = blockgruppe,
  type = 1,
  detailed = TRUE
)

anova_table_median_5_alt <- anova_result_median_5_alt$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%
  filter(Effect != "(Intercept)") %>%
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_median_5_alt <- aov_ez(
  id = "vp",
  dv = "median_dist",
  within = "blockgruppe",
  data = darts_binned_5_alt,
  type = 3
)
emm_median_5_alt <- emmeans(aov_afex_median_5_alt, ~ blockgruppe)
contrast_median_5_alt <- contrast(emm_median_5_alt, method = "poly")
```

## Mittelwert (jung)
```{r}
#| eval: true
#| echo: false
kable(anova_table_mean_5_jung, caption = "Within-Subject Effects")
kable(contrast_mean_5_jung, caption = "Within-Subject Contrasts")
```

## Median (jung)

```{r}
#| eval: true
#| echo: false
kable(anova_table_median_5_jung, caption = "Within-Subject Effects")
kable(contrast_median_5_jung, caption = "Within-Subject Contrasts")
```

## Mittelwert (alt)

```{r}
#| eval: true
#| echo: false
kable(anova_table_mean_5_alt, caption = "Within-Subject Effects")
kable(contrast_mean_5_alt, caption = "Within-Subject Contrasts")
```

## Median (alt)
```{r}
#| eval: true
#| echo: false
kable(anova_table_median_5_alt, caption = "Within-Subject Effects")
kable(contrast_median_5_alt, caption = "Within-Subject Contrasts")
```

:::
:::

# Daten (5x3 Bl√∂cke, gesamt 15 Bl√∂cke)

* hier wurden immer **3 Bl√∂cke** zusammengefasst (24 W√ºrfe) und jeweils der Mittelwert und Median berechnet
* insgesamt **5 Datenpunkte**
* es wurden also nur 15 der urspr√ºnglich 20 Bl√∂cke in Betracht gezogen

```{r}
#| eval: true
#| echo: false

darts_binned_3_jung <- darts_distance %>%
  filter(number %in% 1:8) %>%
  mutate(
    blockgruppe = case_when(
      block %in% 1:3 ~ "Block 1‚Äì3",
      block %in% 4:6 ~ "Block 4‚Äì6",
      block %in% 7:9 ~ "Block 7‚Äì9",
      block %in% 10:12 ~ "Block 10‚Äì12",
      block %in% 13:15 ~ "Block 13‚Äì15",
      TRUE ~ NA_character_
    ),
    # Faktor definieren f√ºr richtige Sortierung
    blockgruppe = factor(blockgruppe,
                         levels = c("Block 1‚Äì3", "Block 4‚Äì6", "Block 7‚Äì9", "Block 10‚Äì12", "Block 13‚Äì15"))
  ) %>%
  filter(!is.na(blockgruppe)) %>%
  group_by(vp, blockgruppe) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )

# Alt
darts_binned_3_old <- darts_old_distance %>%
  filter(number %in% 1:8) %>%
  mutate(
    blockgruppe = case_when(
      block %in% 1:3 ~ "Block 1‚Äì3",
      block %in% 4:6 ~ "Block 4‚Äì6",
      block %in% 7:9 ~ "Block 7‚Äì9",
      block %in% 10:12 ~ "Block 10‚Äì12",
      block %in% 13:15 ~ "Block 13‚Äì15",
      TRUE ~ NA_character_
    ),
    # Faktor definieren f√ºr richtige Sortierung
    blockgruppe = factor(blockgruppe,
                         levels = c("Block 1‚Äì3", "Block 4‚Äì6", "Block 7‚Äì9", "Block 10‚Äì12", "Block 13‚Äì15"))
  ) %>%
  filter(!is.na(blockgruppe)) %>%
  group_by(vp, blockgruppe) %>%
  summarise(
    mean_dist = mean(distance, na.rm = TRUE),
    median_dist = median(distance, na.rm = TRUE),
    .groups = "drop"
  )


```

```{r}
#| eval: true
#| echo: false

#Jung
# Mittelwerte transponieren
means_wide_3_jung <- darts_binned_3_jung %>%
  select(vp, blockgruppe, mean_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = mean_dist)

# Mediane transponieren
medians_wide_3_jung <- darts_binned_3_jung %>%
  select(vp, blockgruppe, median_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = median_dist)

# Bl√§tter hinzuf√ºgen
addWorksheet(wb, "Mittelwert 3 Bl√∂cke jung")
addWorksheet(wb, "Median 3 Bl√∂cke jung")

# Daten schreiben
writeData(wb, sheet = "Mittelwert 3 Bl√∂cke jung", means_wide_3_jung)
writeData(wb, sheet = "Median 3 Bl√∂cke jung", medians_wide_3_jung)

# Datei speichern
saveWorkbook(wb, pfad, overwrite = TRUE)
```

```{r}
#| eval: true
#| echo: false

#Alt
# Mittelwerte transponieren
means_wide_3_old <- darts_binned_3_old %>%
  select(vp, blockgruppe, mean_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = mean_dist)

# Mediane transponieren
medians_wide_3_old <- darts_binned_3_old %>%
  select(vp, blockgruppe, median_dist) %>%
  pivot_wider(names_from = blockgruppe, values_from = median_dist)

# Bl√§tter hinzuf√ºgen
addWorksheet(wb, "Mittelwert 3 Bl√∂cke alt")
addWorksheet(wb, "Median 3 Bl√∂cke alt")

# Daten schreiben
writeData(wb, sheet = "Mittelwert 3 Bl√∂cke alt", means_wide_3_old)
writeData(wb, sheet = "Median 3 Bl√∂cke alt", medians_wide_3_old)

# Datei speichern
saveWorkbook(wb, pfad, overwrite = TRUE)
```

::: {.panel-tabset}
## Diagramm (jung)

```{r}
#| eval: true
#| echo: false

# Aggregieren nach Blockgruppe (√ºber alle vp)
darts_binned_summary_3_jung <- darts_binned_3_jung%>%
  group_by(blockgruppe) %>%
  summarise(
    mean_dist = mean(mean_dist, na.rm = TRUE),
    median_dist = mean(median_dist, na.rm = TRUE),  # Achtung: Mittel der Mediane
    .groups = "drop"
  )

darts_binned_long <- darts_binned_summary_3_jung %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ",
               values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

graph <- ggplot(darts_binned_long, aes(x = blockgruppe, y = Distanz, color = Typ, group = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  
  scale_y_continuous(limits = c(65, 90), breaks = seq(65, 90, by = 5)) +
  
  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +

  labs(
    x = "Blockgruppe",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

ggplotly(graph)
```

## Diagramm (alt)

```{r}
#| eval: true
#| echo: false

# Aggregieren nach Blockgruppe (√ºber alle vp)
darts_binned_summary_3_old <- darts_binned_3_old %>%
  group_by(blockgruppe) %>%
  summarise(
    mean_dist = mean(mean_dist, na.rm = TRUE),
    median_dist = mean(median_dist, na.rm = TRUE),  # Achtung: Mittel der Mediane
    .groups = "drop"
  )

darts_binned_long_3_old <- darts_binned_summary_3_old %>%
  pivot_longer(cols = c(mean_dist, median_dist),
               names_to = "Typ",
               values_to = "Distanz") %>%
  mutate(Typ = recode(Typ,
                      "mean_dist" = "Mittelwert",
                      "median_dist" = "Median"))

graph <- ggplot(darts_binned_long_3_old, aes(x = blockgruppe, y = Distanz, color = Typ, group = Typ)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", se = FALSE, linetype = "dotted") +
  
  scale_y_continuous(limits = c(65, 100), breaks = seq(65, 100, by = 5)) +
  
  scale_color_manual(
    name = "Legende:",
    values = c("Mittelwert" = "azure4", "Median" = "darkgoldenrod2")
  ) +

  labs(
    x = "Blockgruppe",
    y = "Distanz (in mm)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    legend.title = element_text(face = "bold"),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(face = "bold")
  )

ggplotly(graph)
```

## Daten
::: {.panel-tabset}
## Mittelwert (jung)
```{r}
#| eval: true
#| echo: false

datatable(means_wide_3_jung,
  rownames = F,
  colnames = c("VP", "Block 1-3", "Block 4-6", "Block 7-9", "Block 10-12", "Block 13-15"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(means_wide_3_jung), digits = 2)
```

## Median (jung)
```{r}
#| eval: true
#| echo: false

datatable(medians_wide_3_jung,
  rownames = F,
  colnames = c("VP", "Block 1-3", "Block 4-6", "Block 7-9", "Block 10-12", "Block 13-15"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(medians_wide_3_jung), digits = 2)
```

## Mittelwert (alt)
```{r}
#| eval: true
#| echo: false

datatable(means_wide_3_old,
  rownames = F,
  colnames = c("VP", "Block 1-3", "Block 4-6", "Block 7-9", "Block 10-12", "Block 13-15"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(means_wide_3_old), digits = 2)
```

## Median (alt)
```{r}
#| eval: true
#| echo: false

datatable(medians_wide_3_old,
  rownames = F,
  colnames = c("VP", "Block 1-3", "Block 4-6", "Block 7-9", "Block 10-12", "Block 13-15"),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 10
  )
) %>%
  formatRound(columns = 2:ncol(medians_wide_3_old), digits = 2)
```
:::

## Anova mit Messwiederholung

```{r}
#| eval: true
#| include: false

## --- Faktoren setzen ---
darts_binned_3_jung$vp <- factor(darts_binned_3_jung$vp)
darts_binned_3_jung$blockgruppe <- factor(
  darts_binned_3_jung$blockgruppe,
  levels = c("Block 1‚Äì3", "Block 4‚Äì6", "Block 7‚Äì9", "Block 10‚Äì12", "Block 13‚Äì15")
)

darts_binned_3_old$vp <- factor(darts_binned_3_old$vp)
darts_binned_3_old$blockgruppe <- factor(
  darts_binned_3_old$blockgruppe,
  levels = c("Block 1‚Äì3", "Block 4‚Äì6", "Block 7‚Äì9", "Block 10‚Äì12", "Block 13‚Äì15")
)

## --- Jung: Mittelwert ---
anova_result_mean_3_jung <- ezANOVA(
  data = darts_binned_3_jung,
  dv = mean_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

anova_table_mean_3_jung <- anova_result_mean_3_jung$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%
  filter(Effect != "(Intercept)") %>%
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_mean_3_jung <- aov_ez(
  id = "vp",
  dv = "mean_dist",
  within = "blockgruppe",
  data = darts_binned_3_jung,
  type = 3
)
contrast_mean_3_jung <- contrast(emmeans(aov_afex_mean_3_jung, ~ blockgruppe), method = "poly")

## --- Jung: Median ---
anova_result_median_3_jung <- ezANOVA(
  data = darts_binned_3_jung,
  dv = median_dist,
  wid = vp,
  within = blockgruppe,
  type = 3,
  detailed = TRUE
)

anova_table_median_3_jung <- anova_result_median_3_jung$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%
  filter(Effect != "(Intercept)") %>%
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_median_3_jung <- aov_ez(
  id = "vp",
  dv = "median_dist",
  within = "blockgruppe",
  data = darts_binned_3_jung,
  type = 3
)
contrast_median_3_jung <- contrast(emmeans(aov_afex_median_3_jung, ~ blockgruppe), method = "poly")

## --- Alt: Mittelwert ---
anova_result_mean_3_old <- ezANOVA(
  data = darts_binned_3_old,
  dv = mean_dist,
  wid = vp,
  within = blockgruppe,
  type = 1,
  detailed = TRUE
)

anova_table_mean_3_old <- anova_result_mean_3_old$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%
  filter(Effect != "(Intercept)") %>%
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_mean_3_old <- aov_ez(
  id = "vp",
  dv = "mean_dist",
  within = "blockgruppe",
  data = darts_binned_3_old,
  type = 3
)
contrast_mean_3_old <- contrast(emmeans(aov_afex_mean_3_old, ~ blockgruppe), method = "poly")

## --- Alt: Median ---
anova_result_median_3_old <- ezANOVA(
  data = darts_binned_3_old,
  dv = median_dist,
  wid = vp,
  within = blockgruppe,
  type = 1,
  detailed = TRUE
)

anova_table_median_3_old <- anova_result_median_3_old$ANOVA %>%
  mutate(etasq_p = SSn / (SSn + SSd)) %>%
  filter(Effect != "(Intercept)") %>%
  select(Effect, DFn, DFd, SSn, SSd, F, p, etasq_p) %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

aov_afex_median_3_old <- aov_ez(
  id = "vp",
  dv = "median_dist",
  within = "blockgruppe",
  data = darts_binned_3_old,
  type = 3
)
contrast_median_3_old <- contrast(emmeans(aov_afex_median_3_old, ~ blockgruppe), method = "poly")
```

::: {.panel-tabset}

## Mittelwert (jung)
```{r}
#| eval: true
#| echo: false

kable(anova_table_mean_3_jung, caption = "Within-Subject Effects")
kable(contrast_mean_3_jung, caption = "Within-Subject Contrasts")
```

## Median (jung)
```{r}
#| eval: true
#| echo: false

kable(anova_table_median_3_jung, caption = "Within-Subject Effects")
kable(contrast_median_3_jung, caption = "Within-Subject Contrasts")
```

## Mittelwert (alt)
```{r}
#| eval: true
#| echo: false

kable(anova_table_mean_3_old, caption = "Within-Subject Effects")
kable(contrast_mean_3_old, caption = "Within-Subject Contrasts")
```

## Median (alt)
```{r}
#| eval: true
#| echo: false

kable(anova_table_median_3_old, caption = "Within-Subject Effects")
kable(contrast_median_3_old, caption = "Within-Subject Contrasts")
```
:::
:::


# NIRS Auswertung

::: {.callout-important}
Hier habe ich _n_=7  Proband*innen ausgewertet.
:::


### Plots

**15 Bl√∂cke √° 7 W√ºrfe (Pilot 1)**

* **Aktivit√§t**: 4s / Wurf = 28s
* **Pause:** 24-32s
* **_n_**= 7

::: {.panel-tabset}

::: {.grid columns=2}
![](https://via.placeholder.com/150)
![](https://via.placeholder.com/150)
![](https://via.placeholder.com/150)
![](https://via.placeholder.com/150)
:::
:::


### Preprocessing

**Repare data**

```{matlab}
#| eval: false
#| echo: true

hmrR_PreprocessIntensity_NAN(int);
hmrR_PreprocessIntensity_Negative(int);
```

**Intensity to OD**
```{matlab}
#| eval: false
#| echo: true

dod = hmrR_Intensity2OD(int);
```

**Motion Artefact Detection** 

* eigentlich nicht notwendig, wenn man TDDR und Wavelet verwendet, d.h. hier √ºberfl√ºssig, aber nicht schlimm
* Problem: es detektiert nicht zwingend alle Artefakte
* L√∂sung: Kombination aus TDDR und Wavelet beheben Spikes und pl√∂tzliche Baseline shifts zuverl√§ssig
```{matlab}
#| eval: false
#| echo: true

% MotionArtefact Detection


MotArt.tMotion    = 1.0; % tastet jetzt in 1s-Schritten ab
MotArt.thresh     = 2.0; % wird in dem Fenster ein Signalwechsel >2.0 entdeckt, ist es ein Artefakt
MotArt.NewRejLim  = 0.5;
MotArt.MaxLoops   = 3;
MotArt.MaskTime   = 1; % um jedes Artefakt wird zus√§tzlich 1s davor und danach markiert
```

**Pruning channels**

* sehr schlechte Kan√§le werden hier auf 0 gesetzt
* auf Grundlage der Signal-to-Noise-Ratio und dem Scalp-Coupling-Index
* Scalp-Coupling-Index ist hier deaktiviert

```{matlab}
#| eval: false
#| echo: true


%Homer Algorithmus
mlActHmr = hmrR_PruneChannels(int, probe, mlActMan, tInc_pruning, dRange, SNRthresh, SDrange);

%SCI
[mlActSCI, SCI] = ot_hmr3_SCI(dod, SCIfcut_min, SCIfcut_max, SCIthresh, tInc_pruning);

dRange = [5e-04, 1e+00];  %# NIRSport2 - signal is here 
SNRthresh = 6;
SDrange = [0 45]; %# alle channel, die bis zu 45mm auseinander liegen, werden in die Analyse eingeschlossen

SCIthresh = 0;  %# auf Grundlage von SCI wird nicht rejected, nur auf Grundlage vom SNR
SCIfcut_min = 0.8;  
SCIfcut_max = 2.2;   

```

**Motion Artifacts Correction**

* deinieren von sehr schlechten Kan√§len, die ich nicht ber√ºcksichtigen m√∂chte
* danach Anwendung des TDDR- und Wavelet-Filters (Reihenfolge zwingend erforderlich!)

```{r}
#| eval: false
#| echo: true

MaxBadCh  = 0.30;      %# proportion of bad channels to define a bad time
    LimtRej   = [10 Inf];   %# if a bad segment is outside this limits, mark it as good
    LimtInc   = [5 Inf];  %# if a good segment is outside this limits, mark it as bad
    tMask     = 2;         % #making for tInc
    tInc_beforecorr = ot_hmr3_tIncDef(dod, tIncAutoCh, mlAct, MaxBadCh, LimtRej, LimtInc, tMask);

% Turnon filters

turnon_tddr = 1;
iqr_wavelet = 1.2; 
turnon_wavelet = 1;

    
% TDDR
    if turnon_tddr
        fprintf('\n-> MOTION ARTEFACTS CORRECTION TDDR...\n')
        dod = ot_hmr_MotionCorrectTDDR(dod, mlAct, []);
    end
    
% Wavelet
    fprintf('\n-> MOTION ARTEFACTS CORRECTION WAVELET...\n')
    dod = hmrR_MotionCorrectWavelet(dod, mlAct, mlAct, iqr_wavelet, turnon_wavelet);

```

**Stimuli Rejection**

* √ºber turn-on kann ich entscheiden, ob ich den StimRej aktivieren m√∂chte oder nicht
* ich habe es ausgeschalten, um m√∂glichst viele Sequenzen in der Auswertung zu behalten
```{matlab}
#| eval: false
#| echo: true

stim = hmrR_StimRejection(dod, stim, tInc, tInc, tRange_StimRej);

tRange_StimRej = [-2,2]
turnon_stim_rejection = 0;
```

**Bandpass Filter**

* hier ist, wenn ich eine polynomische Driftorder (=3, siehe GLM) annehme nur der lowpass-filter
* highpass kann dementsprechend gel√∂scht werden

```{matlab}
#| eval: false
#| echo: true

dod = hmrR_BandpassFilt(dod, hpf, lpf);

hpf = 0.01
lpf = 0.5
```

**OD to concentration**
```{matlab}
#| eval: false
#| echo: true

dc = hmrR_OD2Conc(dod, probe, ppf);

ppf = [5.5, 5.5]
```


**Accelerometer als Regressor f√ºr GLM vorbereiten**

```{matlab}
#| eval: false
#| echo: true
    
    %# Rohdaten laden
    accX = snirf.aux(1).dataTimeSeries;
    accY = snirf.aux(2).dataTimeSeries;
    accZ = snirf.aux(3).dataTimeSeries;
    t_acc = snirf.aux(1).time;

    %# Samplingrate des Accelerometers
    fs_acc = 1 / mean(diff(t_acc));
    fprintf('Accelerometer-Samplingrate: %.2f Hz\n', fs_acc);

    %# PCA oder Betrag auf Rohdaten (noch ungefiltert)
    acc_all = [accX(:), accY(:), accZ(:)];
    use_pca = true;

    if use_pca
        acc_all = normalize(acc_all);  % z-Transformation vor PCA
        [coeff, score] = pca(acc_all);
        acc_motion = score(:,1);
        fprintf('Bewegungssignal aus PCA\n');
    else
        acc_motion = sqrt(sum(acc_all.^2, 2));
        fprintf('Bewegungssignal als Betrag (acc_mag)\n');
    end

    %# Interpolation auf fNIRS-Zeitachse
    t_nirs = snirf.data.time;
    acc_interp = interp1(t_acc, acc_motion, t_nirs, 'linear', 'extrap');

    %# === Filterung nach Interpolation ===
    visual = false;
    [acc_interp_filt, ~] = acc_butter_filter(acc_interp, 1 / mean(diff(t_nirs)), visual);

    %# Z-Transformation vor GLM
    acc_interp = acc_interp_filt - mean(acc_interp_filt);
    acc_interp = acc_interp / std(acc_interp);
```

**GLM**

* hier nehme ich z.B. die Short-Distance-Channel und die Accelerometer-Daten mit als Regressoren in die Berechnung ein
* Time range darf nicht zu lang sein, damit es das GLM nicht destabilisiert, hier: Zeitraum der Aktivit√§t
* Sp√§ter rechne ich mit dcAvg weiter 
```{matlab}
#| eval: false
#| echo: true

%# GLM estimation
    Aaux = acc_interp;  % Vektor: [N x 1], L√§nge = L√§nge von dc
    rcMap = [];
    [data_yavg, data_yavgstd, nTrials, data_ynew, data_yresid, data_ysum2, beta_blks, yR_blks, hmrstats] = ...
    hmrR_GLM(dc, stim, probe, mlAct, Aaux, tInc, rcMap, trange_glm, glmSolveMethod, idxBasis, paramsBasis, rhoSD_ssThresh, flagNuisanceRMethod, driftOrder, c_vector)
    
conditions = {'1', '2', '3'};
trange_glm = [-2, 28];
glmSolveMethod = 1;
rhoSD_ssThresh = 15;
flagNuisanceRMethod = 1;
driftOrder = 3;
c_vector = zeros(1, length(conditions)); % jetzt ist c_vector leer

idxBasis = 1;
paramsBasis = [0.5 0.5];
```






















Der prozentuale Lernerfolg berechnet sich wie folgt: $100\% - \left( \frac{\text{Endwert}}{\text{Startwert}} \times 100\% \right)$. 

```{r}
#| eval: true
#| echo: false

# # Zwei separate Tabellen f√ºr Anfangs- und Endwerte
# start_values <- darts_binned %>%
#   filter(blockgruppe == "Block 1‚Äì3") %>%
#   select(vp, start = mean_dist)
# 
# end_values <- darts_binned %>%
#   filter(blockgruppe == "Block 13‚Äì15") %>%
#   select(vp, end = mean_dist)
# 
# # Join beider Tabellen
# lernerfolg_df <- left_join(start_values, end_values, by = "vp") %>%
#   mutate(
#     start_prozent = 100,
#     end_prozent = (end / start) * 100,
#     lernerfolg = start_prozent - end_prozent
#   )
```

```{r}
#| eval: true
#| echo: false
#| table-fold: true

# kable(lernerfolg_df, digits = 2, caption = "Prozentualer Lernerfolg pro Proband*in")
```

```{r}
#| eval: true
#| echo: false
#| include: false

# # Zwei separate Tabellen f√ºr Anfangs- und Endwerte
# start_values <- darts_binned %>%
#   filter(blockgruppe == "Block 1‚Äì3") %>%
#   select(vp, start = median_dist)
# 
# end_values <- darts_binned %>%
#   filter(blockgruppe == "Block 13‚Äì15") %>%
#   select(vp, end = median_dist)
# 
# # Join beider Tabellen
# lernerfolg_df_med_3<- left_join(start_values, end_values, by = "vp") %>%
#   mutate(
#     start_prozent = 100,
#     end_prozent = (end / start) * 100,
#     lernerfolg = start_prozent - end_prozent
#   )
```

```{r}
#| eval: true
#| echo: false


# kable(lernerfolg_df, digits = 2, caption = "Prozentualer Lernerfolg pro Proband*in")
```

```{r}
#| eval: true
#| echo: false

# # Anfangs- und Endwerte pro VP (Block 1 & Block 20)
# start_values <- mean_distance %>%
#   filter(block == 1) %>%
#   select(vp, start = mean_distance)
# 
# end_values <- mean_distance %>%
#   filter(block == 20) %>%
#   select(vp, end = mean_distance)
# 
# # Prozentualer Lernerfolg
# lernerfolg_df_mean_1_20 <- left_join(start_values, end_values, by = "vp") %>%
#   mutate(
#     start_prozent = 100,
#     end_prozent = (end / start) * 100,
#     lernerfolg = start_prozent - end_prozent
#   )

```

```{r}
#| eval: true
#| echo: false
#| include: false

# start_values <- median_distance %>%
#   filter(block == 1) %>%
#   select(vp, start = median_distance)
# 
# end_values <- median_distance %>%
#   filter(block == 20) %>%
#   select(vp, end = median_distance)
# 
# lernerfolg_df_median_1_20 <- left_join(start_values, end_values, by = "vp") %>%
#   mutate(
#     start_prozent = 100,
#     end_prozent = (end / start) * 100,
#     lernerfolg = start_prozent - end_prozent
#   )

```

```{r}
#| eval: true
#| echo: false
#| table-fold: true

# kable(lernerfolg_df_mean_1_20, digits = 2, caption = "Lernerfolg von Block 1 zu 20 (Mittelwert)")
```

```{r}
#| eval: true
#| echo: false
#| 
# kable(lernerfolg_df_median_1_20, digits = 2, caption = "Lernerfolg von Block 1 zu 20 (Median)")
```

```{r}
#| eval: true
#| echo: false

# # Anfangs- und Endwerte: Block 1 & 20
# start_values_old_mean <- mean_distance_old %>%
#   filter(block == 1) %>%
#   select(vp, start = mean_distance)
# 
# end_values_old_mean <- mean_distance_old %>%
#   filter(block == 20) %>%
#   select(vp, end = mean_distance)
# 
# # Lernerfolg berechnen
# lernerfolg_df_mean_old_1_20 <- left_join(start_values_old_mean, end_values_old_mean, by = "vp") %>%
#   mutate(
#     start_prozent = 100,
#     end_prozent = (end / start) * 100,
#     lernerfolg = start_prozent - end_prozent
  )
```

```{r}
#| eval: true
#| echo: false
#| include: false

# start_values_old_median <- median_distance_old %>%
#   filter(block == 1) %>%
#   select(vp, start = median_distance)
# 
# end_values_old_median <- median_distance_old %>%
#   filter(block == 20) %>%
#   select(vp, end = median_distance)
# 
# lernerfolg_df_median_old_1_20 <- left_join(start_values_old_median, end_values_old_median, by = "vp") %>%
#   mutate(
#     start_prozent = 100,
#     end_prozent = (end / start) * 100,
#     lernerfolg = start_prozent - end_prozent
#   )
```

```{r}
#| eval: true
#| echo: false

# kable(lernerfolg_df_mean_old_1_20, digits = 2, caption = "Lernerfolg von Block 1 zu 20 (Mittelwert, alt)")
```

```{r}
#| eval: true
#| echo: false
#| 
# kable(lernerfolg_df_median_old_1_20, digits = 2, caption = "Lernerfolg von Block 1 zu 20 (Median)")
```